start: _JUNK* (creation | creation_inside_quotes) _JUNK*
     | _JUNK+

_JUNK: "." | SYMBOL | LOYALTY_COST | PUNCTUATION | INT | WORD

creation_inside_quotes: "\"" _JUNK+ creation "\""
creation: /creates?/i (TOKEN_NAME ",")? (create_quantity | create_x | create_a_number_of) "." it_has_rules?
create_quantity: QUANTITY characteristics
create_x: "X" characteristics where_x_quantity
create_a_number_of: "a number of" characteristics equal_to_quantity
characteristics: LEGENDARY? power_toughness? colors? subtypes types /tokens?/ that_are_colors? (with_clause_ending | with_clause? that_are_attacking? named? attached? for_each? at_the?)

QUANTITY: /[a-z]+/
// QUANTITY: "a" | "an" | "two" | "two" | "three" | "four" | "five" | "six" | "seven" | "eight" | "nine" | "ten" | "eleven" | "twelve" | "thirteen"
TOKEN_NAME: CAP_WORD (" " CAP_WORD)*
LEGENDARY: "legendary"
where_x_quantity: ", where X is" (WORD | PUNCTUATION)+
equal_to_quantity: "equal to" WORD+
it_has_rules: "It has \"" RULES_TEXT "\""
RULES_TEXT: /[^"]+/
that_are_colors: "that are" COLOR "," COLOR ", and" COLOR // Hazezon Tamar
// with_keywords: "with" WORD ("and" WORD)?
with_clause_ending: 
with_clause: "with" WORD ("and" WORD)?
WITH: WORD | "\"" RULES_TEXT "\""
that_are_attacking: "that are" "tapped and"? "attacking"
named: "named" TOKEN_NAME
attached: "attached to" WORD+
for_each: "for each" (WORD | PUNCTUATION)+
at_the: "at the beginning of your next upkeep"

power_toughness: POWER "/" TOUGHNESS
POWER: INT
TOUGHNESS: INT
colors: COLOR | COLOR "and" COLOR
COLOR: "white" | "blue" | "black" | "red" | "green" | "colorless"
subtypes: SUBTYPE+
// SUBTYPE: "Human" | "Warrior" | "Avatar" | "Bird" | "Aura" | "Eldrazi" | "Scion" | "Elemental" | "Cat" | "Harpy" | "Squirrel" | "Wurm" | "Sand" | "Spirit" | "Servo" | "Saproling"
SUBTYPE: CAP_WORD
types: TYPE+
TYPE: "creature" | "artifact" | "enchantment" | "land" | "planeswalker"

SYMBOL: /\{(?:[WUBRGCXSTQE]|\d+)(?:\/[WUBRGP])?\}/
LOYALTY_COST: /\[(?:\+|−)\d+\]:/
PUNCTUATION: /[()—',+\-:\/]/
CAP_WORD: /[A-Z][a-z]+/

%import common.WORD
%import common.INT
%import common.NEWLINE
%import common.WS
%ignore WS